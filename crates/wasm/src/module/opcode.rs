use crate::error::WasmParseError;

#[cfg_attr(any(test, debug_assertions), derive(Debug))]
#[derive(PartialEq)]
pub enum Opcode {
    // Control instructions
    Unreachable = 0x00,
    Nop = 0x01,
    Block = 0x02,
    Loop = 0x03,
    If = 0x04,
    Else = 0x05,
    Try = 0x06,
    Catch = 0x07,
    Throw = 0x08,
    Rethrow = 0x09,
    End = 0x0B,
    Br = 0x0C,
    BrIf = 0x0D,
    BrTable = 0x0E,
    Return = 0x0F,
    Call = 0x10,
    CallIndirect = 0x11,

    // Parametric instructions
    Drop = 0x1A,
    Select = 0x1B,
    SelectT = 0x1C,

    // Variable instructions
    LocalGet = 0x20,
    LocalSet = 0x21,
    LocalTee = 0x22,
    GlobalGet = 0x23,
    GlobalSet = 0x24,

    // Memory instructions
    LoadI32 = 0x28,
    LoadI64 = 0x29,
    LoadF32 = 0x2A,
    LoadF64 = 0x2B,
    Load8SI32 = 0x2C,
    Load8UI32 = 0x2D,
    Load16SI32 = 0x2E,
    Load16UI32 = 0x2F,
    Load8SI64 = 0x30,
    Load8UI64 = 0x31,
    Load16SI64 = 0x32,
    Load16UI64 = 0x33,
    Load32SI64 = 0x34,
    Load32UI64 = 0x35,
    StoreI32 = 0x36,
    StoreI64 = 0x37,
    StoreF32 = 0x38,
    StoreF64 = 0x39,
    Store8I32 = 0x3A,
    Store16I32 = 0x3B,
    Store8I64 = 0x3C,
    Store16I64 = 0x3D,
    Store32I64 = 0x3E,
    MemorySize = 0x3F,
    MemoryGrow = 0x40,

    // Numeric instructions
    ConstI32 = 0x41,
    ConstI64 = 0x42,
    ConstF32 = 0x43,
    ConstF64 = 0x44,

    EqzI32 = 0x45,
    EqI32 = 0x46,
    NeI32 = 0x47,
    LtSI32 = 0x48,
    LtUI32 = 0x49,
    GtSI32 = 0x4A,
    GtUI32 = 0x4B,
    LeSI32 = 0x4C,
    LeUI32 = 0x4D,
    GeSI32 = 0x4E,
    GeUI32 = 0x4F,

    EqzI64 = 0x50,
    EqI64 = 0x51,
    NeI64 = 0x52,
    LtSI64 = 0x53,
    LtUI64 = 0x54,
    GtSI64 = 0x55,
    GtUI64 = 0x56,
    LeSI64 = 0x57,
    LeUI64 = 0x58,
    GeSI64 = 0x59,
    GeUI64 = 0x5A,

    EqF32 = 0x5B,
    NeF32 = 0x5C,
    LtF32 = 0x5D,
    GtF32 = 0x5E,
    LeF32 = 0x5F,
    GeF32 = 0x60,

    EqF64 = 0x61,
    NeF64 = 0x62,
    LtF64 = 0x63,
    GtF64 = 0x64,
    LeF64 = 0x65,
    GeF64 = 0x66,

    ClzI32 = 0x67,
    CtzI32 = 0x68,
    PopcntI32 = 0x69,
    AddI32 = 0x6A,
    SubI32 = 0x6B,
    MulI32 = 0x6C,
    DivSI32 = 0x6D,
    DivUI32 = 0x6E,
    RemSI32 = 0x6F,
    RemUI32 = 0x70,
    AndI32 = 0x71,
    OrI32 = 0x72,
    XorI32 = 0x73,
    ShlI32 = 0x74,
    ShrSI32 = 0x75,
    ShrUI32 = 0x76,
    RotlI32 = 0x77,
    RotrI32 = 0x78,

    ClzI64 = 0x79,
    CtzI64 = 0x7A,
    PopcntI64 = 0x7B,
    AddI64 = 0x7C,
    SubI64 = 0x7D,
    MulI64 = 0x7E,
    DivSI64 = 0x7F,
    DivUI64 = 0x80,
    RemSI64 = 0x81,
    RemUI64 = 0x82,
    AndI64 = 0x83,
    OrI64 = 0x84,
    XorI64 = 0x85,
    ShlI64 = 0x86,
    ShrSI64 = 0x87,
    ShrUI64 = 0x88,
    RotlI64 = 0x89,
    RotrI64 = 0x8A,

    AbsF32 = 0x8B,
    NegF32 = 0x8C,
    CeilF32 = 0x8D,
    FloorF32 = 0x8E,
    TruncF32 = 0x8F,
    NearestF32 = 0x90,
    SqrtF32 = 0x91,
    AddF32 = 0x92,
    SubF32 = 0x93,
    MulF32 = 0x94,
    DivF32 = 0x95,
    MinF32 = 0x96,
    MaxF32 = 0x97,
    CopysignF32 = 0x98,

    AbsF64 = 0x99,
    NegF64 = 0x9A,
    CeilF64 = 0x9B,
    FloorF64 = 0x9C,
    TruncF64 = 0x9D,
    NearestF64 = 0x9E,
    SqrtF64 = 0x9F,
    AddF64 = 0xA0,
    SubF64 = 0xA1,
    MulF64 = 0xA2,
    DivF64 = 0xA3,
    MinF64 = 0xA4,
    MaxF64 = 0xA5,
    CopysignF64 = 0xA6,

    WrapI32I64 = 0xA7,
    TruncSI32F32 = 0xA8,
    TruncUI32F32 = 0xA9,
    TruncSI32F64 = 0xAA,
    TruncUI32F64 = 0xAB,
    ExtendSI64I32 = 0xAC,
    ExtendUI64I32 = 0xAD,
    TruncSI64F32 = 0xAE,
    TruncUI64F32 = 0xAF,
    TruncSI64F64 = 0xB0,
    TruncUI64F64 = 0xB1,

    ConvertSI32F32 = 0xB2,
    ConvertUI32F32 = 0xB3,
    ConvertSI64F32 = 0xB4,
    ConvertUI64F32 = 0xB5,
    DemoteF32F64 = 0xB6,

    ConvertSI32F64 = 0xB7,
    ConvertUI32F64 = 0xB8,
    ConvertSI64F64 = 0xB9,
    ConvertUI64F64 = 0xBA,
    PromoteF32F64 = 0xBB,

    ReinterpretI32F32 = 0xBC,
    ReinterpretI64F64 = 0xBD,
    ReinterpretF32I32 = 0xBE,
    ReinterpretF64I64 = 0xBF,

    // Miscellaneous instructions
    Extend8SI32 = 0xC0,
    Extend16SI32 = 0xC1,
    Extend8SI64 = 0xC2,
    Extend16SI64 = 0xC3,
    Extend32SI64 = 0xC4,

    // Reference types instructions
    RefNull = 0xD0,
    RefIsNull = 0xD1,
    RefFunc = 0xD2,

    // Bulk memory operations
    MemoryInit = 0xFC_08,
    DataDrop = 0xFC_09,
    MemoryCopy = 0xFC_0A,
    MemoryFill = 0xFC_0B,
    TableInit = 0xFC_0C,
    ElemDrop = 0xFC_0D,
    TableCopy = 0xFC_0E,
    TableGrow = 0xFC_0F,
    TableSize = 0xFC_10,
    TableFill = 0xFC_11,

    // SIMD (Single WasmInstruction, Multiple Data) instructions
    LoadV128 = 0xFD_00,
    StoreV128 = 0xFD_0B,
    SplatI8x16 = 0xFD_0C,
    SplatI16x8 = 0xFD_0D,
    SplatI32x4 = 0xFD_0E,
    SplatI64x2 = 0xFD_0F,
    SplatF32x4 = 0xFD_10,
    SplatF64x2 = 0xFD_11,
    ExtractLaneSI8x16 = 0xFD_12,
    ExtractLaneUI8x16 = 0xFD_13,
    ExtractLaneSI16x8 = 0xFD_14,
    ExtractLaneUI16x8 = 0xFD_15,
    ExtractLaneI32x4 = 0xFD_16,
    ExtractLaneI64x2 = 0xFD_17,
    ExtractLaneF32x4 = 0xFD_18,
    ExtractLaneF64x2 = 0xFD_19,
    ReplaceLaneI8x16 = 0xFD_1A,
    ReplaceLaneI16x8 = 0xFD_1B,
    ReplaceLaneI32x4 = 0xFD_1C,
    ReplaceLaneI64x2 = 0xFD_1D,
    ReplaceLaneF32x4 = 0xFD_1E,
    ReplaceLaneF64x2 = 0xFD_1F,
    // Additional SIMD instructions can be added as needed
}

impl Opcode {
    pub(crate) fn from_u8(value: u8) -> Result<Self, WasmParseError> {
        match value {
            0x00 => Ok(Opcode::Unreachable),
            0x01 => Ok(Opcode::Nop),
            0x02 => Ok(Opcode::Block),
            0x03 => Ok(Opcode::Loop),
            0x04 => Ok(Opcode::If),
            0x05 => Ok(Opcode::Else),
            0x06 => Ok(Opcode::Try),
            0x07 => Ok(Opcode::Catch),
            0x08 => Ok(Opcode::Throw),
            0x09 => Ok(Opcode::Rethrow),
            0x0B => Ok(Opcode::End),
            0x0C => Ok(Opcode::Br),
            0x0D => Ok(Opcode::BrIf),
            0x0E => Ok(Opcode::BrTable),
            0x0F => Ok(Opcode::Return),
            0x10 => Ok(Opcode::Call),
            0x11 => Ok(Opcode::CallIndirect),
            0x1A => Ok(Opcode::Drop),
            0x1B => Ok(Opcode::Select),
            0x1C => Ok(Opcode::SelectT),
            0x20 => Ok(Opcode::LocalGet),
            0x21 => Ok(Opcode::LocalSet),
            0x22 => Ok(Opcode::LocalTee),
            0x23 => Ok(Opcode::GlobalGet),
            0x24 => Ok(Opcode::GlobalSet),
            0x28 => Ok(Opcode::LoadI32),
            0x29 => Ok(Opcode::LoadI64),
            0x2A => Ok(Opcode::LoadF32),
            0x2B => Ok(Opcode::LoadF64),
            0x2C => Ok(Opcode::Load8SI32),
            0x2D => Ok(Opcode::Load8UI32),
            0x2E => Ok(Opcode::Load16SI32),
            0x2F => Ok(Opcode::Load16UI32),
            0x30 => Ok(Opcode::Load8SI64),
            0x31 => Ok(Opcode::Load8UI64),
            0x32 => Ok(Opcode::Load16SI64),
            0x33 => Ok(Opcode::Load16UI64),
            0x34 => Ok(Opcode::Load32SI64),
            0x35 => Ok(Opcode::Load32UI64),
            0x36 => Ok(Opcode::StoreI32),
            0x37 => Ok(Opcode::StoreI64),
            0x38 => Ok(Opcode::StoreF32),
            0x39 => Ok(Opcode::StoreF64),
            0x3A => Ok(Opcode::Store8I32),
            0x3B => Ok(Opcode::Store16I32),
            0x3C => Ok(Opcode::Store8I64),
            0x3D => Ok(Opcode::Store16I64),
            0x3E => Ok(Opcode::Store32I64),
            0x3F => Ok(Opcode::MemorySize),
            0x40 => Ok(Opcode::MemoryGrow),
            0x41 => Ok(Opcode::ConstI32),
            0x42 => Ok(Opcode::ConstI64),
            0x43 => Ok(Opcode::ConstF32),
            0x44 => Ok(Opcode::ConstF64),
            0x45 => Ok(Opcode::EqzI32),
            0x46 => Ok(Opcode::EqI32),
            0x47 => Ok(Opcode::NeI32),
            0x48 => Ok(Opcode::LtSI32),
            0x49 => Ok(Opcode::LtUI32),
            0x4A => Ok(Opcode::GtSI32),
            0x4B => Ok(Opcode::GtUI32),
            0x4C => Ok(Opcode::LeSI32),
            0x4D => Ok(Opcode::LeUI32),
            0x4E => Ok(Opcode::GeSI32),
            0x4F => Ok(Opcode::GeUI32),
            0x50 => Ok(Opcode::EqzI64),
            0x51 => Ok(Opcode::EqI64),
            0x52 => Ok(Opcode::NeI64),
            0x53 => Ok(Opcode::LtSI64),
            0x54 => Ok(Opcode::LtUI64),
            0x55 => Ok(Opcode::GtSI64),
            0x56 => Ok(Opcode::GtUI64),
            0x57 => Ok(Opcode::LeSI64),
            0x58 => Ok(Opcode::LeUI64),
            0x59 => Ok(Opcode::GeSI64),
            0x5A => Ok(Opcode::GeUI64),
            0x5B => Ok(Opcode::EqF32),
            0x5C => Ok(Opcode::NeF32),
            0x5D => Ok(Opcode::LtF32),
            0x5E => Ok(Opcode::GtF32),
            0x5F => Ok(Opcode::LeF32),
            0x60 => Ok(Opcode::GeF32),
            0x61 => Ok(Opcode::EqF64),
            0x62 => Ok(Opcode::NeF64),
            0x63 => Ok(Opcode::LtF64),
            0x64 => Ok(Opcode::GtF64),
            0x65 => Ok(Opcode::LeF64),
            0x66 => Ok(Opcode::GeF64),
            0x67 => Ok(Opcode::ClzI32),
            0x68 => Ok(Opcode::CtzI32),
            0x69 => Ok(Opcode::PopcntI32),
            0x6A => Ok(Opcode::AddI32),
            0x6B => Ok(Opcode::SubI32),
            0x6C => Ok(Opcode::MulI32),
            0x6D => Ok(Opcode::DivSI32),
            0x6E => Ok(Opcode::DivUI32),
            0x6F => Ok(Opcode::RemSI32),
            0x70 => Ok(Opcode::RemUI32),
            0x71 => Ok(Opcode::AndI32),
            0x72 => Ok(Opcode::OrI32),
            0x73 => Ok(Opcode::XorI32),
            0x74 => Ok(Opcode::ShlI32),
            0x75 => Ok(Opcode::ShrSI32),
            0x76 => Ok(Opcode::ShrUI32),
            0x77 => Ok(Opcode::RotlI32),
            0x78 => Ok(Opcode::RotrI32),
            0x79 => Ok(Opcode::ClzI64),
            0x7A => Ok(Opcode::CtzI64),
            0x7B => Ok(Opcode::PopcntI64),
            0x7C => Ok(Opcode::AddI64),
            0x7D => Ok(Opcode::SubI64),
            0x7E => Ok(Opcode::MulI64),
            0x7F => Ok(Opcode::DivSI64),
            0x80 => Ok(Opcode::DivUI64),
            0x81 => Ok(Opcode::RemSI64),
            0x82 => Ok(Opcode::RemUI64),
            0x83 => Ok(Opcode::AndI64),
            0x84 => Ok(Opcode::OrI64),
            0x85 => Ok(Opcode::XorI64),
            0x86 => Ok(Opcode::ShlI64),
            0x87 => Ok(Opcode::ShrSI64),
            0x88 => Ok(Opcode::ShrUI64),
            0x89 => Ok(Opcode::RotlI64),
            0x8A => Ok(Opcode::RotrI64),
            0x8B => Ok(Opcode::AbsF32),
            0x8C => Ok(Opcode::NegF32),
            0x8D => Ok(Opcode::CeilF32),
            0x8E => Ok(Opcode::FloorF32),
            0x8F => Ok(Opcode::TruncF32),
            0x90 => Ok(Opcode::NearestF32),
            0x91 => Ok(Opcode::SqrtF32),
            0x92 => Ok(Opcode::AddF32),
            0x93 => Ok(Opcode::SubF32),
            0x94 => Ok(Opcode::MulF32),
            0x95 => Ok(Opcode::DivF32),
            0x96 => Ok(Opcode::MinF32),
            0x97 => Ok(Opcode::MaxF32),
            0x98 => Ok(Opcode::CopysignF32),
            0x99 => Ok(Opcode::AbsF64),
            0x9A => Ok(Opcode::NegF64),
            0x9B => Ok(Opcode::CeilF64),
            0x9C => Ok(Opcode::FloorF64),
            0x9D => Ok(Opcode::TruncF64),
            0x9E => Ok(Opcode::NearestF64),
            0x9F => Ok(Opcode::SqrtF64),
            0xA0 => Ok(Opcode::AddF64),
            0xA1 => Ok(Opcode::SubF64),
            0xA2 => Ok(Opcode::MulF64),
            0xA3 => Ok(Opcode::DivF64),
            0xA4 => Ok(Opcode::MinF64),
            0xA5 => Ok(Opcode::MaxF64),
            0xA6 => Ok(Opcode::CopysignF64),
            0xA7 => Ok(Opcode::WrapI32I64),
            0xA8 => Ok(Opcode::TruncSI32F32),
            0xA9 => Ok(Opcode::TruncUI32F32),
            0xAA => Ok(Opcode::TruncSI32F64),
            0xAB => Ok(Opcode::TruncUI32F64),
            0xAC => Ok(Opcode::ExtendSI64I32),
            0xAD => Ok(Opcode::ExtendUI64I32),
            0xAE => Ok(Opcode::TruncSI64F32),
            0xAF => Ok(Opcode::TruncUI64F32),
            0xB0 => Ok(Opcode::TruncSI64F64),
            0xB1 => Ok(Opcode::TruncUI64F64),
            0xB2 => Ok(Opcode::ConvertSI32F32),
            0xB3 => Ok(Opcode::ConvertUI32F32),
            0xB4 => Ok(Opcode::ConvertSI64F32),
            0xB5 => Ok(Opcode::ConvertUI64F32),
            0xB6 => Ok(Opcode::DemoteF32F64),
            0xB7 => Ok(Opcode::ConvertSI32F64),
            0xB8 => Ok(Opcode::ConvertUI32F64),
            0xB9 => Ok(Opcode::ConvertSI64F64),
            0xBA => Ok(Opcode::ConvertUI64F64),
            0xBB => Ok(Opcode::PromoteF32F64),
            0xBC => Ok(Opcode::ReinterpretI32F32),
            0xBD => Ok(Opcode::ReinterpretI64F64),
            0xBE => Ok(Opcode::ReinterpretF32I32),
            0xBF => Ok(Opcode::ReinterpretF64I64),
            0xC0 => Ok(Opcode::Extend8SI32),
            0xC1 => Ok(Opcode::Extend16SI32),
            0xC2 => Ok(Opcode::Extend8SI64),
            0xC3 => Ok(Opcode::Extend16SI64),
            0xC4 => Ok(Opcode::Extend32SI64),
            0xD0 => Ok(Opcode::RefNull),
            0xD1 => Ok(Opcode::RefIsNull),
            0xD2 => Ok(Opcode::RefFunc),
            0xFC => match value {
                0x08 => Ok(Opcode::MemoryInit),
                0x09 => Ok(Opcode::DataDrop),
                0x0A => Ok(Opcode::MemoryCopy),
                0x0B => Ok(Opcode::MemoryFill),
                0x0C => Ok(Opcode::TableInit),
                0x0D => Ok(Opcode::ElemDrop),
                0x0E => Ok(Opcode::TableCopy),
                0x0F => Ok(Opcode::TableGrow),
                0x10 => Ok(Opcode::TableSize),
                0x11 => Ok(Opcode::TableFill),
                _ => Err(WasmParseError::InvalidOpcode(value)),
            },
            0xFD => match value {
                0x00 => Ok(Opcode::LoadV128),
                0x0B => Ok(Opcode::StoreV128),
                0x0C => Ok(Opcode::SplatI8x16),
                0x0D => Ok(Opcode::SplatI16x8),
                0x0E => Ok(Opcode::SplatI32x4),
                0x0F => Ok(Opcode::SplatI64x2),
                0x10 => Ok(Opcode::SplatF32x4),
                0x11 => Ok(Opcode::SplatF64x2),
                0x12 => Ok(Opcode::ExtractLaneSI8x16),
                0x13 => Ok(Opcode::ExtractLaneUI8x16),
                0x14 => Ok(Opcode::ExtractLaneSI16x8),
                0x15 => Ok(Opcode::ExtractLaneUI16x8),
                0x16 => Ok(Opcode::ExtractLaneI32x4),
                0x17 => Ok(Opcode::ExtractLaneI64x2),
                0x18 => Ok(Opcode::ExtractLaneF32x4),
                0x19 => Ok(Opcode::ExtractLaneF64x2),
                0x1A => Ok(Opcode::ReplaceLaneI8x16),
                0x1B => Ok(Opcode::ReplaceLaneI16x8),
                0x1C => Ok(Opcode::ReplaceLaneI32x4),
                0x1D => Ok(Opcode::ReplaceLaneI64x2),
                0x1E => Ok(Opcode::ReplaceLaneF32x4),
                0x1F => Ok(Opcode::ReplaceLaneF64x2),
                _ => Err(WasmParseError::InvalidOpcode(value)),
            },
            _ => Err(WasmParseError::InvalidOpcode(value)),
        }
    }
}
